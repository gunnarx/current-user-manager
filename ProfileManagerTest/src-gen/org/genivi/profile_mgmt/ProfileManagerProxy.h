/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.201311151436.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_PROFILE_MGMT_Profile_Manager_PROXY_H_
#define ORG_GENIVI_PROFILE_MGMT_Profile_Manager_PROXY_H_

#include "ProfileManagerProxyBase.h"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace profile_mgmt {

template <typename ... _AttributeExtensions>
class ProfileManagerProxy: virtual public ProfileManager, virtual public ProfileManagerProxyBase, public _AttributeExtensions... {
 public:
    ProfileManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~ProfileManagerProxy();


    /**
     * Returns the wrapper class that provides access to the broadcast detectedUser.
     */
    virtual DetectedUserSelectiveEvent& getDetectedUserSelectiveEvent() {
        return delegate_->getDetectedUserSelectiveEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast synchronizedUser.
     */
    virtual SynchronizedUserSelectiveEvent& getSynchronizedUserSelectiveEvent() {
        return delegate_->getSynchronizedUserSelectiveEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast stop.
     */
    virtual StopSelectiveEvent& getStopSelectiveEvent() {
        return delegate_->getStopSelectiveEvent();
    }

    /**
     * Calls registerMe with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void registerMe(const std::string& appID, const int32_t& seatID, CommonAPI::CallStatus& callStatus);
    /**
     * Calls registerMe with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> registerMeAsync(const std::string& appID, const int32_t& seatID, RegisterMeAsyncCallback callback);
    /**
     * Calls unregisterMe with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void unregisterMe(const std::string& consumerAddress, const std::string& appID, const int32_t& seatID, CommonAPI::CallStatus& callStatus);
    /**
     * Calls unregisterMe with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> unregisterMeAsync(const std::string& consumerAddress, const std::string& appID, const int32_t& seatID, UnregisterMeAsyncCallback callback);
    /**
     * Calls confirm with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void confirm(const uint64_t& sessionID, CommonAPI::CallStatus& callStatus);
    /**
     * Calls confirm with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> confirmAsync(const uint64_t& sessionID, ConfirmAsyncCallback callback);
    /**
     * Calls stopped with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void stopped(const uint64_t& sessionID, CommonAPI::CallStatus& callStatus);
    /**
     * Calls stopped with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> stoppedAsync(const uint64_t& sessionID, StoppedAsyncCallback callback);
    

    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual std::string getAddress() const;

    /**
     * Returns the domain of the remote partner this proxy communicates with.
     */
    virtual const std::string& getDomain() const;

    /** 
     * Returns the service ID of the remote partner this proxy communicates with.
     */
    virtual const std::string& getServiceId() const;

    /**
     * Returns the instance ID of the remote partner this proxy communicates with.
     */
    virtual const std::string& getInstanceId() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<ProfileManagerProxyBase> delegate_;
};


//
// ProfileManagerProxy Implementation
//
template <typename ... _AttributeExtensions>
ProfileManagerProxy<_AttributeExtensions...>::ProfileManagerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        delegate_(std::dynamic_pointer_cast<ProfileManagerProxyBase>(delegate)),
        _AttributeExtensions(*(std::dynamic_pointer_cast<ProfileManagerProxyBase>(delegate)))... {
}

template <typename ... _AttributeExtensions>
ProfileManagerProxy<_AttributeExtensions...>::~ProfileManagerProxy() {
}

template <typename ... _AttributeExtensions>
void ProfileManagerProxy<_AttributeExtensions...>::registerMe(const std::string& appID, const int32_t& seatID, CommonAPI::CallStatus& callStatus) {
    delegate_->registerMe(appID, seatID, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ProfileManagerProxy<_AttributeExtensions...>::registerMeAsync(const std::string& appID, const int32_t& seatID, RegisterMeAsyncCallback callback) {
    return delegate_->registerMeAsync(appID, seatID, callback);
}
template <typename ... _AttributeExtensions>
void ProfileManagerProxy<_AttributeExtensions...>::unregisterMe(const std::string& consumerAddress, const std::string& appID, const int32_t& seatID, CommonAPI::CallStatus& callStatus) {
    delegate_->unregisterMe(consumerAddress, appID, seatID, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ProfileManagerProxy<_AttributeExtensions...>::unregisterMeAsync(const std::string& consumerAddress, const std::string& appID, const int32_t& seatID, UnregisterMeAsyncCallback callback) {
    return delegate_->unregisterMeAsync(consumerAddress, appID, seatID, callback);
}
template <typename ... _AttributeExtensions>
void ProfileManagerProxy<_AttributeExtensions...>::confirm(const uint64_t& sessionID, CommonAPI::CallStatus& callStatus) {
    delegate_->confirm(sessionID, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ProfileManagerProxy<_AttributeExtensions...>::confirmAsync(const uint64_t& sessionID, ConfirmAsyncCallback callback) {
    return delegate_->confirmAsync(sessionID, callback);
}
template <typename ... _AttributeExtensions>
void ProfileManagerProxy<_AttributeExtensions...>::stopped(const uint64_t& sessionID, CommonAPI::CallStatus& callStatus) {
    delegate_->stopped(sessionID, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ProfileManagerProxy<_AttributeExtensions...>::stoppedAsync(const uint64_t& sessionID, StoppedAsyncCallback callback) {
    return delegate_->stoppedAsync(sessionID, callback);
}

template <typename ... _AttributeExtensions>
std::string ProfileManagerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
const std::string& ProfileManagerProxy<_AttributeExtensions...>::getDomain() const {
    return delegate_->getDomain();
}

template <typename ... _AttributeExtensions>
const std::string& ProfileManagerProxy<_AttributeExtensions...>::getServiceId() const {
    return delegate_->getServiceId();
}

template <typename ... _AttributeExtensions>
const std::string& ProfileManagerProxy<_AttributeExtensions...>::getInstanceId() const {
    return delegate_->getInstanceId();
}

template <typename ... _AttributeExtensions>
bool ProfileManagerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool ProfileManagerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& ProfileManagerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& ProfileManagerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}

        

} // namespace profile_mgmt
} // namespace genivi
} // namespace org


#endif // ORG_GENIVI_PROFILE_MGMT_Profile_Manager_PROXY_H_
